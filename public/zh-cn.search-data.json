{"/about/":{"data":{"":" 待补充测试 测试 待补充测试 测试 待补充测试 测试 "},"title":"关于"},"/ai/":{"data":{"":"","创建投资组合#创建投资组合":"选择与众不同的新颖项目创建投资组合：\n以 Kaggle 和 阿里天池 等竞赛网站为起点； 将报告在微信公众号、知乎、掘金等平台展示结果； 在 Github 上托管个人博客； 考虑录制一段简短的视频，展示您的发现； ","参考网址#参考网址：":" 应用机器学习获得报酬 2024 年成为数据科学家的学习路径 2024 年学习生成式人工智能的最佳路线图 从数据收集到模型部署：数据科学项目的 6 个阶段 - KDnuggets 全面的 MLOps 学习路径：2024 年版 MLOps 概述 ","学习路径#学习路径":" flowchart LR classDef someclassA fill:#58C9B9 classDef someclassB fill:#9DC8C8 classDef someclassC fill:#f100,stroke-width:1px classDef someclassD fill:#a3c9c7 classDef someclassE fill:#fff,stroke:#fff,color:#fff classDef someclassF fill:#ff9900 A(人工智能):::someclassA A -- 阶段0：基础 --\u003e B(基础知识):::someclassB --\u003e B1(Python\\ R):::someclassC -.-\u003e B2(线性代数\n微积分):::someclassC -.-\u003e B3(概率论\n数理统计\n贝叶斯统计):::someclassC A -- 阶段1：入门 --\u003e C(端到端的\n机器学习):::someclassA --\u003e C12(机器学习概述) --\u003e C13(机器学习算法) --\u003e C14(建模工具\nSklearn) --\u003e C15(建模步骤\nCRISP-DM) --\u003e Y C -.-\u003e C21(自动机器学习\nAuto ML):::someclassC -.-\u003e C22(大数据集处理):::someclassC A -- 阶段2：进阶 --\u003e D(深度学习):::someclassA --\u003e D11(深度学习概述) --\u003e D12(深度学习算法) --\u003e D13(建模工具\nkeras\nPyTorch\nTensorflow\nFastAI) D -.-\u003e D21(深度解析算法):::someclassC -.-\u003e D22(自制框架\nDeZero):::someclassC -.-\u003e D23(工具源码):::someclassC D13 --\u003e D141(自然语言\nNLP) --\u003e Y D13 --\u003e D142(计算机视觉\nCV) --\u003e Y A -- 阶段3：先进 --\u003e F(生成式\n人工智能):::someclassA --\u003e F1(提示工程) F3(从头构建\n生成模型) --\u003e F4(最新趋势\n\\研究\\论文) --\u003e Y F1 --\u003e F21(NLP -\u003e LLM) --\u003e F3 F1 --\u003e F22(CV -\u003e VLM) --\u003e F3 Y(练习\nUCI 数据集\n竞赛\nkaggle\n阿里天池\n...):::someclassA --\u003e Z A -- 阶段4：部署 --\u003e Z1 Z(模型部署\nMLOps):::someclassF Z1(版本控制\\协作:\nGit\\Github) -.-\u003e Z12(操作系统:Linux\n容器化\\云:Docker) -.-\u003e Z13(ML应用平台：\nHF Spaces\\\nStreamlit Sharing) -.-\u003e Z2(《MLOps 概述》\n部署方式\n核心概念\n......) --\u003e Z3(《主要内容》\n自动化管道\n监控\n生命周期管理\n治理) --\u003e Z4(《管理工具》\nMLFlow\nDVC\nPolyaxon\nMetaflow\nKubeflow) Z4 --\u003e Z A -- 补充知识 --\u003e G1(集成学习):::someclassB -.- G2(时间序列):::someclassB -.- G3(迁移学习):::someclassB -.- G4(强化学习):::someclassB -.- G5(专业知识):::someclassB","补充知识#补充知识":"1、集成学习 主要内容参考如下：\n了解集成学习相关概念； 学习集成学习常用算法及集成学习方法体系（Bagging，Boosting，Stacking，Blending，等）； 学习集成学习 Python 库（Scikit-learn，XGBoost，LightGBM，CatBoost）； 练习\\实践。如，小数据集 UCI ML 或 kaggle 等； 通过 Flask API 或 Streamlit\\Gradio 部署应用； 推荐阅读：\n《集成学习：基础与算法》 - 周志华，李楠 2、领域专业知识 作为数据科学家，需要具备解决相关领域的问题，需要理解相关领域的专业知识。 领域专业知识：\n学习不同领域专业知识，如保险，信贷，物流，电商等； 通过研究竞赛平台多领域数据科学问题，获得 多样化的经验 培养 解决问题的技能； 可以通过收集的行业知识\\信息，分析案例，创建行业知识库； ","阶段-0基础知识#阶段 0：基础知识":" 微积分是研究变化\\微分与累积\\积分的数学分支，用于解决运动、曲线、面积等动态问题。 AI 基础 线性代数是研究向量、矩阵和线性变换的数学分支，核心用来解方程、处理空间变换和数据分析。 AI 基础 概率论是研究随机现象规律性的数学分支，用概率量化不确定性。 AI 基础 数理统计是用数学工具（尤其是概率论）从数据中总结规律、预测未知的学科，核心是抽样、估计和假设检验。 AI 基础 Python一种广泛使用的解释型、高级和通用的编程语言。 AI 基础 ","阶段-1端到端的机器学习#阶段 1：端到端的机器学习":" 以学习完整的建模过程为主要目标，以了解常用机器算法（优缺点，原理，步骤，应用）和学习建模工具（Sklearn\\ scikit-learn）为次要目标， 快速熟悉端到端的建模过程。 实践多个案例，熟悉端到端的建模过程，主要内容参考如下：\n了解人工智能，机器学习，深度学习，统计机器学习等相关概念； 学习常用算法原理。了解算法优缺点，原理，步骤，应用即可，不必过多关注数学公式； 学习建模分步过程。如：CRISP-DM； 学习建模工具。如：scikit-learn； 在小数据集上练习。如： the UC Irvine Machine Learning Repository； 将模型打包或序列化后的结果部署为 Flask API 或 Streamlit\\Gradio 应用； 补充内容：\n了解自动化机器学习工具。 了解处理大数据集的 python 库。 推荐阅读：\n《深度学习：从基础到实践》 （上册）- [美] Andrew Glassner ","阶段-2深度学习#阶段 2：深度学习":"深度学习，主要内容参考如下：\n了解深度学习相关概念； 学习深度学习常用算法及深度学习方法体系（CNN，RNN，LSTM，Transformer，等）； 学习深度学习框架\\工具（keras，PyTorch，Tensorflow，FastAI）； 学习自然语言处理，计算机视觉； 在 KAggle，阿里天池上练习； 补充内容：\n机器学习算法深度解析，需要一定数学基础（线性代数，微积分，概率论与数理统计）。 从头开始理解机器学习算法将帮助您为任务选择正确的算法，解释结果，解决高级问题，将算法扩展到新应用程序，并提高现有算法的性能。 深度解析机器学习算法； 学习深度学习自制框架：DeZero； 学习框架\\工具源码； 推荐阅读：\n《深度学习：从基础到实践》 （下册）- [美] Andrew Glassner 《深度学习入门基于Python的理论与实现》 - [日] 斋藤康毅 《深度学习入门2自制框架》 - [日] 斋藤康毅 《深度学习进阶：自然语言处理》 - [日] 斋藤康毅 《深度学习入门4：强化学习》 - [日] 斋藤康毅 《achine Learning Algorithms in Depth》 - VADIM SMOLYAKOV 《统计学习方法》 (第2版) - 李航 《机器学习》（西瓜书）- 周志华 ","阶段-3生成式人工智能#阶段 3：生成式人工智能":"深入研究高级人工智能主题，关注生成模型：\n学习提示工程（专注于创建和改进提示）。如：coze； NLP 的生成模型，LLM（大语言模型）； 计算机视觉的生成模型； 了解如何从头开始构建这些生成模型； 了解生成人工智能的最新趋势和研究； 推荐阅读：\n2024 年学习生成式人工智能的最佳路线图 机器学习的最新进展带代码的论文 10 个学习法学硕士的免费资源 ","阶段-4模型部署#阶段 4：模型部署":"MLOps，机器学习的部署和生命周期管理：\n基础知识：git\\ github\\ Linux\\容器化\\云，HF Spaces\\ Streamlit Sharing； 部署方式：在线部署：批处理，实时（数据库触发器、发布/订阅、Web 服务、应用内）；离线部署（在本地开发环境、测试环境或内部离线环境中部署批处理，实时处理）； 主要内容：自动化管道，监控，生命周期管理，治理； 核心概念：持续集成与持续部署（CI/CD），版本控制，模型监控； 管理工具：MLFlow，Polyaxon，Metaflow，Kubeflow； 推荐阅读：\n成为 MLOps 工程师所需的唯一免费课程：MLOps Zoomcamp 掌握 MLOps 的 10 个 GitHub 存储库 "},"title":"人工智能"},"/ai/end_to_end/":{"data":{"":"\n概述人工智能，机器学习，深度学习，统计机器学习等相关概念； 算法了解常用算法原理。了解算法优缺点，原理，应用； 工具Python 中的机器学习；简单有效的预测数据分析工具； 步骤选择并学习一个过程（CRISP-DM）。学习建模分步过程； 自动机器学习python 自动机器学习的常用库概述；可用来快速选择模型\\算法； 大数据集python 处理大数据集的方法； "},"title":"1. 端到端的机器学习"},"/blog/":{"data":{"":" 数据科学实践 关于 AI，大数据的学习笔记，项目实践 👻 关于 ✍ 项目 ⚓ 指南 人工智能 机器学习，深度学习，强化学习，计算机视觉，自然语言处理，MLOps，生成式人工智能，通用人工智能…..\n大数据 传输，存储，计算，展示；Flink，Kafka, DolphinScheduler，Zeppelin，Doris，Hudi，Datart……\n物联网 …..\n数据分析方法….. 端到端的机器学习简单易用，功能强大丰富。 核心框架简单易用，功能强大丰富。 商业分析方法….. 深度学习简单易用，功能强大丰富。 数据仓库B 站，数仓项目学习（尚硅谷，等）； 可视化Python，BI 生成式人工智能大模型 数据治理简单易用，功能强大丰富。 Python\\SQL 数据分析Datart + Python\\SQL 分布式训练简单易用，功能强大丰富。 模型部署 MLOps简单易用，功能强大丰富。 "},"title":"项目列表"},"/guide/":{"data":{"":"","1数学知识#1、数学知识":" 微积分是研究变化\\微分与累积\\积分的数学分支，用于解决运动、曲线、面积等动态问题。 AI 基础 线性代数是研究向量、矩阵和线性变换的数学分支，核心用来解方程、处理空间变换和数据分析。 AI 基础 概率论是研究随机现象规律性的数学分支，用概率量化不确定性。 AI 基础 数理统计是用数学工具（尤其是概率论）从数据中总结规律、预测未知的学科，核心是抽样、估计和假设检验。 AI 基础 ","2编程语言#2、编程语言":" Linux\\ShellLinux 是一种自由和开放源码的类 UNIX 操作系统。 大数据\\云计算基础 Python一种广泛使用的解释型、高级和通用的编程语言。 AI 基础 Java由 Sun 公司于 1995 年 5 月推出的高级程序设计语言。 大数据基础 Scala一种可随您扩展的编程语言：从小型脚本到大型多平台应用程序。 大数据基础 Go一种快速、静态类型的编译语言，感觉就像是一种动态类型的解释语言。 云原生基础 ","3机器学习python#3、机器学习：Python":"3.1、科学计算 NumpyPython 科学计算的基本包；强大的 N 维数组；数值计算工具。 数据分析 Pandas一个快速、强大、灵活且易于使用的开源数据分析和操作工具。 数据分析 SklearnPython 中的机器学习；简单有效的预测数据分析工具。 机器学习 Sklearn 源码Sklearn 源码\n机器学习 StatsmodelsPython 统计建模库；用于进行统计测试和统计数据探索。 统计模型 3.2、可视化 Matplotlib用 Python 创建静态、动画和交互式可视化。 Seaborn一个基于 matplotlib 的 Python 数据可视化库。 PlotlyPlotly 的 Python 图形库可制作交互式、出版质量的图形。 3.3、模型解释 SHAP一种博弈论方法，用于解释任何机器学习模型的输出。 3.4、模型部署 Streamlit一个开源 Python 框架；快速构建和部署强大的数据应用程序。 FlaskFlask 是一个轻量级的 WSGI Web 应用程序框架。 3.5、空间数据 GeoPandas旨在让使用 Python 处理地理空间数据变得更加容易。 Folium轻松地在交互式传单地图上可视化使用 Python 处理的数据。 3.6、自动机器学习 ","4深度学习#4、深度学习":" Keras一个用 Python 编写的开源神经网络库。 TensorFlowGoogle Brain 团队开发的一个机器学习和深度学习的开源库。 TensorFlow 源码Tensorflow 源码 FastAIfastai 是一个深度学习库，易于使用且快速高效。 PyTorch一个基于 Python 的开源机器学习库。 PyTorch 源码PyTorch 源码\n…… DeZero使用 Python 从头开始实现深度神经网络。 ","5数据库#5、数据库":" MySQL一个流行的关系型数据库管理系统。 PostgreSQL一个功能强大的开源对象关系数据库系统。 ","5软件工程#5、软件工程":" GitGit 是一个免费的开源 分布式版本控制系统。 Github一个在线软件源代码托管服务平台，使用Git作为版本控制软件。 Docker一个开源的应用容器引擎，基于 Go 语言。 云原生 Kubernetes开源容器编排引擎，用于自动部署、扩展和管理容器化应用程序 云原生 ","6商业分析bi#6、商业分析：BI":" Datart新一代数据可视化开放平台。 观远 BI让业务用起来的现代化BI。 Quick BI一款全场景数据消费式的BI平台。 PowerBI由微软开发的商业分析工具集。 Tableau一款强大的数据可视化工具。 ","7大数据#7、大数据":"7.1、ETL 抽取\\转换\\加载 SeaTunnel下一代高性能 / 分布式、海量数据集成工具。\nWaterdrop（现更名为 SeaTunnel） 支持批流一体 Flink CDC一个基于流的数据集成工具，旨在为用户提供一套功能更加全面的编程接口（API）。 抽取 Flume一种分布式、可靠且可用的服务，用于高效收集、聚合和移动大量日志数据。 日志抽取\\加载 7.2、存储\\数据湖 IcebergApache Iceberg 是一种适用于大型分析表的高性能格式。 多引擎兼容 7.3、计算\\处理 Hadoop一个框架，允许使用简单的编程模型跨计算机集群分布式处理大型数据集。 存储\\批处理 HiveApache Hive 是一个分布式、容错数据仓库系统，可实现大规模分析。 批处理 Spark一个多语言引擎，用于在单节点机器或集群上执行数据工程、数据科学和机器学习。 批处理 Flink一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。 流处理 Kafka一个开源分布式事件流平台，实现高性能数据管道、流分析、数据集成和关键任务应用程序。 消息队列 + 流处理 Doris一个用于实时分析的现代数据仓库。它可以对大规模实时数据进行闪电般快速的分析。 OLAP StarRocks一款高性能分析型数据仓库，可进行多维、实时、高并发的数据分析。 OLAP 7.4、调度 Airflow一个由社区创建的平台，用于以编程方式编写、安排和监控工作流程。 DolphinScheduler一个多元化、可扩展的开源工作流协调平台，具有强大的DAG可视化界面。 7.5、开发\\IDE StreamPark一个用户友好的流媒体应用程序开发框架和一站式云原生实时计算平台。 Zeppelin基于 Web 的笔记本，支持使用 SQL、Scala、Python、R 等进行 数据驱动、交互式数据分析和协作文档。 7.6、治理：元数据\\血缘\\目录 DataHub 一个现代数据目录，旨在简化元数据管理、数据发现和数据治理。 数据目录\\血缘\\元数据 OpenMetadata一个统一的元数据平台，用于数据发现、数据可观测性和数据治理，由中央元数据存储库、深入的列级沿袭和无缝团队协作提供支持。 数据目录\\血缘\\质量\\元数据 7.7、治理：数据质量 Great Expectations批量和流式大数据质量解决方案。 Python/现代数据栈 Soda Core一个免费的开源 Python 库和 CLI 工具，使数据工程师能够测试数据质量。 低代码 7.8、治理：数据安全 Open Policy Agent一个开源的通用策略引擎，可在整个堆栈中实现统一的上下文感知策略实施。 云原生 Ranger一个框架，用于在整个 Hadoop 平台上启用、监控和管理全面的数据安全性。 HDFS/Hive/Kafka "},"title":"指南"},"/guide/math_calculus/":{"data":{"":"","good#good":"test "},"title":"微积分"},"/guide/math_linear_algebra/":{"data":{"":"","#":"1、定义 1.1、一般形式：\n一个 $m\\times n$ 的矩阵 $\\boldsymbol{A}$ 可以表示为： $\\boldsymbol{A}=\\begin{bmatrix}a_{11}\u0026a_{12}\u0026\\cdots\u0026a_{1n} \\\\ a_{21}\u0026a_{22}\u0026\\cdots\u0026a_{2n} \\\\ \\vdots\u0026\\vdots\u0026\\ddots\u0026\\vdots \\\\ a_{m1}\u0026a_{m2}\u0026\\cdots\u0026a_{mn}\\end{bmatrix}$ ，其中 $a_{ij}$ 或 $\\boldsymbol{A}_{ij}$ 表示矩阵 $\\boldsymbol{A}$ 的第 $i$ 行第 $j$ 列的元素。 1.2、特殊矩阵：\n方阵：当矩阵的行数 $m$ 等于列数 $n$ 时，称为 $n$ 阶方阵 零矩阵：所有元素都为 0 的矩阵，记为 $\\boldsymbol{O}$ 单位矩阵：主对角线元素都为 1，其余元素都为 0 的方阵，记为 $\\boldsymbol{I}$（或 $\\boldsymbol{E}$ ）。对于 $n$ 阶单位矩阵，通常表示为 $\\boldsymbol{I}_n$ 2、基本运算 2.1、数乘：\n标量 $c$ 与矩阵 $\\boldsymbol{A}$ 的数乘，$c\\boldsymbol{A}$ 中的元素是 $\\boldsymbol{A}$ 的对应元素与 $c$ 的乘积。 $$2\\cdot\\begin{bmatrix}2\u00268\u0026-3 \\\\ 6\u0026-2\u00265\\end{bmatrix}=\\begin{bmatrix}2\\cdot2\u00262\\cdot8\u00262\\cdot(-3) \\\\ 2\\cdot6\u00262\\cdot(-2)\u00262\\cdot5\\end{bmatrix}=\\begin{bmatrix}4\u002616\u0026-6 \\\\ 12\u0026-4\u002610\\end{bmatrix}$$ 2.2、转置：\n一个 $m \\times n$ 的矩阵 $\\boldsymbol{A}$ 的转置，是一个 $n\\times m$ 的矩阵，记作 $\\boldsymbol{A}^T$，转置矩阵 $\\boldsymbol{A}^T$ 第 $i$ 行第 $j$ 列的元素是原矩阵 $\\boldsymbol{A}$ 第 $j$ 行第 $i$ 列的元素（行列互换）。 $$\\begin{bmatrix}1\u00264\u00263 \\\\ 0\u0026-5\u00267\\end{bmatrix}^T=\\begin{bmatrix}1\u00260 \\\\ 4\u0026-5 \\\\ 3\u00267\\end{bmatrix}$$ $$c(\\boldsymbol{A}^T) = c(\\boldsymbol{A})^T$$ 2.3、加（减）法：\n$m \\times n$ 矩阵 $\\boldsymbol{A}$ 和 $\\boldsymbol{B}$ 的加（减）：$\\boldsymbol{A} \\pm \\boldsymbol{B} = \\boldsymbol{C}$ 为一个 $m\\times n$ 矩阵，其中 $\\boldsymbol{C}$ 中的元素是 $\\boldsymbol{A}$ 和 $\\boldsymbol{B}$ 相应元素的加（减）：$c_{ij} = a_{ij} + b_{ij}$，$1 \\leq i \\leq m$，$1 \\leq j \\leq n$。 $$\\begin{bmatrix}1\u00263\u00261 \\\\ 1\u00260\u00260\\end{bmatrix}+\\begin{bmatrix}1\u00260\u00265 \\\\ 7\u00265\u00260\\end{bmatrix}=\\begin{bmatrix}1+1\u00263+0\u00261+5 \\\\ 1+7\u00260+5\u00260+1\\end{bmatrix}=\\begin{bmatrix}2\u00263\u00266 \\\\ 8\u00265\u00260\\end{bmatrix}$$ $$\\boldsymbol{A} + \\boldsymbol{B} = \\boldsymbol{B} + \\boldsymbol{A}$$ $$(\\boldsymbol{A} + \\boldsymbol{B})^T = \\boldsymbol{A}^T + \\boldsymbol{B}^T$$ $$c(\\boldsymbol{A} + \\boldsymbol{B}) = c\\boldsymbol{A} + c\\boldsymbol{B}$$ "},"title":"线性代数"},"/guide/math_mathematical_statistics/":{"data":{"":"","good#good":"test "},"title":"数理统计"},"/guide/math_probability_theory/":{"data":{"":"","good#good":"test "},"title":"概率论"},"/guide/program_go/":{"data":{"":"","good#good":"test "},"title":"Go"},"/guide/program_java/":{"data":{"":"","good#good":"test "},"title":"Java"},"/guide/program_linux/":{"data":{"":"","-其他命令#🛠️ 其他命令":" 命令 作用 ","-其他实用工具#🛠️ 其他实用工具":" 命令 作用 示例 tar 压缩/解压文件 tar -czvf archive.tar.gz dir/\ntar -xzvf archive.tar.gz crontab 定时任务管理 crontab -e（编辑）\ncrontab -l（查看） history 查看命令历史 history | grep \"apt\" alias 设置命令别名 alias ll='ls -alF' ","-用户与权限管理#👥 用户与权限管理":" 命令 作用 示例 useradd 添加用户 useradd -m newuser passwd 修改密码 passwd username sudo 提权执行命令 sudo apt update chmod 修改权限 chmod 755 script.sh chown 修改文件所有者 chown user:group file.txt ","-系统信息与管理#🖥️ 系统信息与管理":" 命令 作用 示例 top/htop 实时进程监控 top\nhtop（需安装） ps 查看进程 ps aux ps -ef|grep nginx kill 终止进程 kill -9 1234（强制终止 PID 1234） df 查看磁盘空间 df -h（人类可读格式） du 查看目录大小 du -sh /home/（汇总大小） free 查看内存使用 free -h systemctl 管理系统服务 systemctl start nginx\nsystemctl status sshd shutdown 关机/重启 shutdown now\nreboot ","-网络操作#🌐 网络操作":" 命令 作用 示例 ping 测试网络连通性 ping google.com ifconfig/ip 查看/配置网络接口 ifconfig\nip addr curl/wget 下载文件 curl -O http://example.com/file\nwget http://example.com/file ssh 远程登录 ssh user@192.168.1.1 scp 远程复制文件 scp file.txt user@host:/path/ netstat/ss 查看网络连接/端口 netstat -tulnp\nss -tulnp ","-软件包管理#📦 软件包管理":" 命令（Debian/Ubuntu） 命令（RHEL/CentOS） 作用 示例 apt update yum update 更新软件包列表 sudo apt update apt install yum install 安装软件 sudo apt install nginx apt remove yum remove 卸载软件 sudo apt remove nginx dpkg -i rpm -i 安装本地包 sudo dpkg -i package.deb ","1-linux-概述#1. Linux 概述":"1.1. Linux 是什么？ Linux 是一个开源、免费的操作系统内核，由芬兰程序员 Linus Torvalds 在 1991 年 首次发布。 广泛应用于服务器、超级计算机、嵌入式设备（如路由器、智能电视）以及个人电脑（如 Ubuntu、Fedora）。 1.2. Linux 系统目录结构 /\t[根目录，所有目录的起点] ├── bin [核心命令：存放系统启动和运行必需的基础命令，如 ls/cp/bash] ├── sbin [管理员命令：存放系统管理命令，如 iptables/reboot，需 root 权限] ├── boot [启动文件：包含内核(vmlinuz)和引导加载器(GRUB)文件] ├── dev [设备文件：硬件设备抽象文件，如 /dev/sda(硬盘)、/dev/tty(终端)] ├── etc [配置文件：系统和应用程序的配置，如 /etc/passwd(用户)、/etc/nginx/] ├── home [用户目录：普通用户的家目录，如 /home/username 存放个人文件] ├── root [root家目录：超级用户的家目录，普通用户无权访问] ├── lib [核心库：存放/bin和/sbin所需的共享库(.so文件)] ├── usr [用户软件：相当于Windows的Program Files] │ ├── bin [非必需的用户命令] │ ├── sbin [非必需的管理命令] │ └── lib [应用程序库文件] ├── opt [第三方软件：商业软件或大型应用，如 Oracle/Matlab] ├── proc [内核/进程信息：虚拟文件系统，实时反映进程和内核状态] ├── sys [系统设备：虚拟文件系统，管理设备驱动和内核参数] 数据：存放系统启动后的临时文件(如PID文件)] ├── var [可变数据：经常变化的文件] │ ├── log [系统日志：如 /var/log/syslog] │ └── cache [应用程序缓存] ├── tmp [临时文件：所有用户可读写，重启后通常清空] ├── mnt [手动挂载：临时挂载点(如U盘/硬盘)] └── media [自动挂载：可移动设备自动挂载点(如光盘/U盘)] 1.3. Linux 文件基本属性: Tip\nLinux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。\n文件类型 所有者权限 组权限 其他用户权限 ↓ ↓ ↓ ↓ - r w x r - - r - - ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ ↑ │ │ └执行 │ │ └执行 │ │ └执行 │ └─写入 │ └─写入 │ └─写入 └──读取 └──读取 └──读取 1️⃣ 文件类型：\nd（文件\\目录）； -（文本、二进制、压缩包等常规文件）； l（符号链接，指向另一个文件的快捷方式（软链接）） …… 2️⃣ 用户身份划分：\n所有者（Owner）：文件的创建者/拥有者，拥有最高控制权。 所属组（Group）：文件所属的用户组，组内成员共享组权限。 其他用户（Others）：既不是所有者也不在所属组的其他用户。 3️⃣ 权限类型：每种用户身份对应三种基本权限：\n读 r：查看文件内容或列出目录内容。 写 w：修改文件内容或在目录中创建/删除文件。 执行 x：运行文件（如脚本）或进入目录。 4️⃣ 权限表示法：符号模式；数字模式\n符号模式： 用 r，w，x 表示权限； 数字模式： 用八进制数表示，每位数字对应 r=4、w=2、x=1 的和； 符号模式 数字模式 权限案例 rw-r--r-- 644 所有者 rw-（读写） 6 = 4+2（读写） 所属组 r--（只读） 4 = 4（只读） 其他用户 r--（只读） 4 = 4（只读） 1.4. Linux 常用命令 📂 文件\\文件夹权限 ls, chmod, chown, chgrp 📂 文件\\文件夹权限： 1️⃣ 使用 ls -l 命令查看文件权限：\n$ ls -l -rw-r--r-- 1 alice dev 1024 Sep 1 10:00 file.txt 第1字段 -rw-r--r--：文件类型和权限。 第3字段 alice：所有者。 第4字段 dev：所属组。 2️⃣ chmod 更改权限\n$ chmod u+x script.sh $ chmod g-w file.txt $ chmod 755 script.sh 给所有者添加执行权限 移除所属组的写权限 数字模式：rwxr-xr-x 3️⃣ chown 更改所有者和所属组\n$ chown alice:dev file.txt 修改所有者为 alice，组为 dev 4️⃣ chgrp 单独修改所属组\n$ chgrp dev file.txt 🛣 路径查看\\切换： ：\n👻\n：\n文件与目录操作 命令 作用\\实例 xx --help 查看帮助： pwd 1️⃣ $ cd /home（切换目录）\n$ cd ..（返回上级） ls 1️⃣ $ ls -l（列出目录内容）\n2️⃣ $ ls -a（显示隐藏文件） chmod 1️⃣ $ chmod u+x test.sh（）\n2️⃣ $ chmod g-w file.txt（）\n$ chmod 755 test.sh（） touch 创建空文件或更新时间戳\n$ touch newfile.txt https://www.unicode.org/emoji/charts/full-emoji-list.html\n命令 作用 示例 mkdir 创建目录 mkdir dir\nmkdir -p dir1/dir2（递归创建） rm 删除文件/目录 rm file.txt\nrm -r dir/（递归删除）\nrm -f file 或 dir/（强制删除） cp 复制文件/目录 cp file1.txt file2.txt\ncp -r dir1/ dir2/ mv 移动/重命名文件 mv old.txt new.txt\nmv file /tmp/ cat 查看文件内容 cat file.txt grep 文本搜索 grep \"error\" log.txt\ngrep -r \"pattern\" /dir/ find 查找文件 find /home -name \"*.txt\" ","good#good":"test ","参考网址#参考网址：":" https://www.w3ccoo.com/linux/ https://www.tutorialspoint.com/unix/unix-getting-started.htm "},"title":"Linux\\Shell"},"/guide/program_python/":{"data":{"":"","good#good":"test "},"title":"Python"},"/guide/program_scala/":{"data":{"":"","good#good":"test "},"title":"Scala"},"/guide/python_flask/":{"data":{"":"","good#good":"test "},"title":"Python_Flask"},"/guide/python_folium/":{"data":{"":"","good#good":"test "},"title":"Python_Folium"},"/guide/python_geopandas/":{"data":{"":"","good#good":"test "},"title":"Python_GeoPandas"},"/guide/python_matplotlib/":{"data":{"":"","0-速查表#0. 速查表":" 对象 设置 方法 OO-style pyplot-style 创建 Figure _ fig = plt.figure(figsize=(3,3)) plt.figure(figsize=(3,3)) 创建 Axes _ fig, ax = plt.subplots(figsize=(3,3)) plt.plot() 标题 内容 _ ax.set_title('Title') plt.title('Title') 标题 格式 参数 ax.set_title('Title', loc='left', font='Georgia', size=12, color='gray', weight='bold') plt.title('Title', loc='left', font='Georgia', size=12, color='gray', weight='bold') 标题 格式 参数字典 format_dir = {'fontproperties': 'Georgia', 'fontsize': 15, 'color': 'Gray', 'fontweight': 'bold'}\nax.set_title('Title', loc='left', **format_dir) format_dir = {'fontproperties': 'Georgia', 'fontsize': 15, 'color': 'Gray', 'fontweight': 'bold'}\nplt.title('Title', loc='left', **format_dir) 标题 位置 简单设置 ax.set_title('Title', loc='left') \u003cloc\u003e: ’left’,‘center’,‘right’ plt.title(\"Title\", loc='left') \u003cloc\u003e: ’left’,‘center’,‘right’ 设置类容 OO-style pyplot-style 关闭 坐标轴 ax.axis('off')# 关闭所有坐标轴 ax.spines['top'].set_visible(False) plt.axis('off') # 关闭所有坐标轴 plt.gca().spines['top'].set_visible(False) 坐标轴 颜色 ax..spines['bottom'].set_color('red') plt.gca().spines['bottom'].set_color('red') 坐标轴 粗细 ax.spines['left'].set_linewidth(0.5) plt.gca().spines['left'].set_linewidth(0.5) 坐标轴 位置 1\n单个参数 ax.spines[\"right\"].set_position()\n# `` 坐标轴 位置 1 ax.spines[\"right\"].set_position((\"outward\", 5))\n# “inward”：向内，“outward”：向外 plt.gca().spines[\"right\"].set_position((\"outward\", 5)) # “inward”：向内，“outward”：向外 `` `` ","1-概述#1. 概述":"1.1. 编码风格 (1). the OO-style import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 2, 100) # Sample data. fig, ax = plt.subplots(figsize=(3.5, 3), layout='constrained') # Create a figure ax.plot(x, x, label='linear') # Plot some data on the Axes. ax.plot(x, x**2, label='quadratic') # Plot more data on the Axes... ax.set_title(\"Simple Plot\") # Add a title to the Axes. ax.set_xlabel('x label') # Add an x-label to the Axes. ax.set_ylabel('y label') # Add a y-label to the Axes. ax.legend() # Add a legend. plt.show() # Show the figure. (2). pyplot-style import numpy as np import matplotlib.pyplot as plt x = np.linspace(0, 2, 100) # Sample data. plt.figure(figsize=(3.5, 3), layout='constrained') plt.plot(x, x, label='linear') # Plot some data on the (implicit) Axes. plt.plot(x, x**2, label='quadratic') # etc. plt.title(\"Simple Plot\") plt.xlabel('x label') plt.ylabel('y label') plt.legend() # Add a legend. plt.show() # Show the figure. 1.2. 图形结构 (1). Figure 📝 Figure 是整个窗体，你可以把它想象成一个画板，我们在其上面创建图形进，这是最为外层的对象。 Figure 可以将其看作是整个绘图区域的容器 一个 Figure 对象可以包含一或多个 Axes （子图）对象。 OO-stylepyplot-style import matplotlib.pyplot as plt # an empty figure with no Axes fig = plt.figure(figsize=(3.5, 3), layout='constrained') plt.show() 输出结果如下：\n\u003cFigure size 350x300 with 0 Axes\u003e import matplotlib.pyplot as plt # an empty figure with no Axes plt.figure(figsize=(3.5, 3), layout='constrained') plt.show() 输出结果如下：\n\u003cFigure size 350x300 with 0 Axes\u003e (2). Axes 📝 Axes （子图）对象，是实际进行绘图操作的区域，包含坐标轴、数据点、线条、图例等元素。 Axes 可以将其看作是包含绘图元素（例如线、点、刻度、标签、图例等）的一个容器。 Axes 指子图，每个子图可以用任一种坐标系表示。如笛卡尔坐标系（直角坐标系），它包含两个 Axis 对象。每个 Axes 都有一个标题，一个 x 标签和一个 y 标签。在这个坐标系内，我们可以绘制各种图形。 OO-stylepyplot-style import matplotlib.pyplot as plt # Create a figure with a single Axes fig, ax = plt.subplots(figsize=(3.5, 3)) plt.show() 输出结果如下：\nimport matplotlib.pyplot as plt # Create a figure plt.figure(figsize=(3.5, 3)) # Create a single Axes plt.plot() plt.show() 输出结果如下：\n(3). Axis 📝 Axis （轴）对象，用于控制图形中的刻度、刻度标签和网格线。 每个 Axes 对象有一个 XAxis 对象和一个 YAxis 对象。 Axis 的主要功能包括：设置标签格式；刻度位置；刻度标签、字体、颜色；刻度线粗细、颜色；网格线显示与否、样式等； OO-stylepyplot-style import matplotlib.pyplot as plt # Create a figure containing a single Axes. fig, ax = plt.subplots(figsize=(3.5, 3)) # Plot some data on the Axes. ax.plot([1, 2, 3, 4], [1, 4, 2, 3]) # Create label formatting dictionary label_format = {'fontproperties': 'Georgia', 'fontsize': 10, 'color': 'Gray', 'fontweight': 'bold'} # Set title ax.set_title('This is Title', **label_format, size=15) # Set labels for the x-axis and y-axis ax.set_xlabel('X Axis Title Here', **label_format) ax.set_ylabel('Y Axis Title Here', **label_format) # Show the figure plt.show() 输出结果如下：\nimport matplotlib.pyplot as plt plt.figure(figsize=(3.5, 3)) plt.plot([1, 2, 3, 4], [1, 4, 2, 3]) # Create label formatting dictionary label_format = {'fontproperties': 'Georgia', 'fontsize': 10, 'color': 'Gray', 'fontweight': 'bold'} plt.title('This is Title', **label_format, size=15) plt.xlabel('X Axis Title Here', **label_format) plt.ylabel('Y Axis Title Here', **label_format) plt.show() 输出结果如下：","2-颜色#2. 颜色":"","3-文本#3. 文本":"","4-figure-图形设置#4. Figure 图形设置":"","5-axes-子图细节设置#5. Axes 子图细节设置":"5.1. 标题： 1️⃣ OO-style 位置 2️⃣ OO-style 格式参数 3️⃣ OO-style 格式字典 4️⃣ pyplot-style 位置 5️⃣ pyplot-style 格式参数 6️⃣ pyplot-style 格式字典 import matplotlib.pyplot as plt fig, ax = plt.subplots(figsize=(3,3)) ax.plot([1, 2, 3, 4], [8, 4, 2, 3]) ax.set_title('Title', loc='left') plt.show() import matplotlib.pyplot as plt fig, ax = plt.subplots(figsize=(3,3)) ax.plot([1, 2, 3, 4], [8, 4, 2, 3]) # Set title ax.set_title('This is Title', loc='left', font='Georgia', size=12, color='gray', weight='bold') plt.show() import matplotlib.pyplot as plt fig, ax = plt.subplots(figsize=(3,3)) ax.plot([1, 2, 3, 4], [8, 4, 2, 3]) # Create label formatting dictionary format_dir = {'fontproperties': 'Georgia', 'fontsize': 15, 'color': 'Gray', 'fontweight': 'bold'} # Set title ax.set_title('This is Title', loc='left', **format_dir) plt.show() import matplotlib.pyplot as plt # Create a figure plt.figure(figsize=(3, 3)) # Create a single Axes plt.plot([1, 2, 3, 4], [8, 4, 2, 3]) plt.title(\"Title\", loc='left') # 将标题设置在左侧 plt.show() import matplotlib.pyplot as plt plt.figure(figsize=(3,3)) plt.plot([1, 2, 3, 4], [8, 4, 2, 3]) # Set title plt.title('Title', loc='left', font='Georgia', size=12, color='gray', weight='bold') plt.show() import matplotlib.pyplot as plt plt.figure(figsize=(3, 3)) plt.plot([1, 2, 3, 4], [8, 4, 2, 3]) # Create label formatting dictionary format_dir = {'fontproperties': 'Georgia', 'fontsize': 15, 'color': 'Gray', 'fontweight': 'bold'} # Set title plt.title('Title', loc='left', **format_dir) plt.show() 5.2. 坐标轴： OO-stylepyplot-style 输出结果如下：\n输出结果如下：","6-多子图绘制#6. 多子图绘制":"6.1. "},"title":"Python_Matplotlib"},"/guide/python_numpy/":{"data":{"":"","good#good":"test "},"title":"Python_Numpy"},"/guide/python_pandas/":{"data":{"":"","good#good":"test "},"title":"Python_Pandas"},"/guide/python_plotly/":{"data":{"":"","good#good":"test "},"title":"Python_Plotly"},"/guide/python_seaborn/":{"data":{"":"","good#good":"test "},"title":"Python_Seaborn"},"/guide/python_shap/":{"data":{"":"","good#good":"test "},"title":"Python_SHAP"},"/guide/python_sklearn/":{"data":{"":"","good#good":"test "},"title":"Python_Sklearn"},"/guide/python_sklearn_source_code/":{"data":{"":"","good#good":"test "},"title":"Python_Sklearn 源码"},"/guide/python_statsmodels/":{"data":{"":"","good#good":"test "},"title":"Python_Statsmodels"},"/guide/python_streamlit/":{"data":{"":"","good#good":"test "},"title":"Python_Streamlit"}}